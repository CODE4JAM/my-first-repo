[ Git & GitHub 기본 명령어 정리 ]

1. Git 설정 관련
--------------------
git --version                     # 깃 버전 확인
git config --global user.name "" # 사용자 이름 설정 (전역)
git config --global user.email ""# 사용자 이메일 설정 (전역)
git config --list                # 설정 확인
git config user.name ""          # 특정 저장소에서 사용자 이름 설정 (옵션)
git config user.email ""         # 특정 저장소에서 사용자 이메일 설정 (옵션)

2. 로컬 저장소 생성 및 초기화
--------------------
git init                          # 현재 폴더를 git 저장소로 초기화
git status                        # 파일 상태 확인
git add README.md                 # README.md 파일을 추적 대상으로 추가
git add .                         # 모든 변경 파일을 스테이징
git commit -m "first commit"      # 커밋 메시지와 함께 변경사항 저장

3. 새로운 저장소 생성 후 GitHub에 업로드
--------------------
git init
git add .
git commit -m "first commit"
git branch -M main                                # 브랜치 이름을 main으로 변경
git remote add origin https://github.com/사용자명/저장소명.git
git push -u origin main

※ 참고: 위 URL은 본인의 GitHub 저장소 주소로 변경

4. 기존 로컬 저장소를 GitHub에 연결할 때
--------------------
git remote add origin https://github.com/사용자명/저장소명.git
git branch -M main
git push -u origin main

5. GitHub 저장소 클론 후 작업 시작
--------------------
git clone https://github.com/사용자명/저장소명.git
cd 저장소명
git status

6. 이후 반복 작업 (수정 사항 반영)
--------------------
git status                          # 변경사항 확인
git add .                           # 변경된 파일 모두 스테이징
git commit -m "업데이트 메시지"      # 커밋
git push                            # 원격 저장소에 업로드

7. 브랜치 관련 (선택)
--------------------
git branch                          # 현재 브랜치 확인
git checkout -b 새브랜치명          # 새 브랜치 생성 및 이동
git checkout main                   # 메인 브랜치로 이동
git merge 새브랜치명                # 병합

8. 기타 유용한 명령어
--------------------
git log                             # 커밋 히스토리 확인
git diff                            # 변경 내용 비교
touch .gitignore                    # 무시할 파일 목록 지정


[ Git 브랜치(branch) 개념 및 명령어 정리 ]

1. 브랜치란?
--------------------
- 브랜치는 현재 코드를 복사해서 독립적으로 작업할 수 있는 '작업 공간'입니다.
- 메인(main) 브랜치를 보존하면서 실험하거나 새로운 기능을 개발할 수 있습니다.

💡 비유: 책 원고를 복사해서 실험용으로 수정하는 것

2. 주요 브랜치 관련 명령어
--------------------
git branch                         # 브랜치 목록 보기
git branch 새브랜치명              # 새 브랜치 만들기
git checkout 새브랜치명            # 브랜치 이동
git checkout -b 새브랜치명         # 브랜치 만들고 바로 이동
git merge 브랜치명                 # 현재 브랜치에 다른 브랜치 병합
git branch -d 브랜치명             # 브랜치 삭제
git log --oneline --graph --all    # 브랜치 흐름 시각적으로 확인

3. 브랜치 작업 흐름 예시
--------------------
# 1. main 브랜치 기준으로 새 브랜치 생성 및 이동
git checkout -b feature-login

# 2. 작업 및 커밋 후 main으로 돌아와 병합
git checkout main
git merge feature-login

# 3. 병합이 완료되면 브랜치 삭제 가능
git branch -d feature-login

4. 브랜치 흐름도
--------------------
[main] ──●──●──●────── 병합
             ↘
            [feature] ──●──●

- 메인 브랜치(main)에서 파생된 feature 브랜치에서 작업 후 다시 병합됨.

5. 충돌(conflict) 상황
--------------------
[main] ──●──●──●
             ↘
            [feature] ──● (충돌 발생)

- main과 feature 브랜치에서 **같은 부분을 수정**했을 때 merge 시 충돌 발생
- 충돌이 발생하면 직접 코드를 수정하여 해결 후 add/commit 필요

6. 충돌 해결 예시
--------------------
# 충돌 상태 확인 후, 충돌된 파일 수동 수정
git status

# 수정한 파일을 add
git add 충돌파일명

# 병합 커밋
git commit

7. 핵심 요약
--------------------
- 브랜치는 안전하게 실험하고 협업할 수 있는 도구입니다.
- 병합 시 충돌이 발생할 수 있으며, 이 경우 수동 해결이 필요합니다.